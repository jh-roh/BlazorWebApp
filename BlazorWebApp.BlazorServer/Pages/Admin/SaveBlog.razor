@page "/admin/manage-blogs/new"
@page "/admin/manage-blogs/edit/{urlBlogId:int?}"
@using BlazorWebApp.BlazorServer.Models
@using Blazored.TextEditor
@inject CategoryService CategoryService
@inject BlogPostService BlogPostService
@inject BlogAuthenticationProvider AuthenticationProvider
@inject NavigationManager NavigationManager

<div class="container">
    <div class="d-flex justify-content-between align-items-center">
         <h3>Save Blog Post</h3>
         
        <NavLink href="/admin/manage-blogs" class="btn btn-primary btn-sm">Back to Manage Blog Posts</NavLink>
    </div>

    <div class="row">
        <div class="col-sm-12" >
            @if(_isLoading)
            {
                <div class="d-flex align-items-center">
                    <div class="text-center">
                        <div class="spinner-border" role="status">
                            <span>Loading...</span>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <EditForm Model="model" OnValidSubmit="SaveBlogAsync">
                <DataAnnotationsValidator/>
                <div class="mb-3">
                    <label class="col-form-label">Title: </label>
                    <InputText @bind-Value="model.Title" class="form-control" placeholder="Enter Title"></InputText>
                    <ValidationMessage For="() => model.Title" />
                </div>
                <div class="mb-3">
                    <label class="col-form-label">Slug: </label>
                    <InputText @bind-Value="model.Slug" class="form-control" placeholder="Enter Title"></InputText>
                    <ValidationMessage For="() => model.Slug" />
                </div>
                <div class="mb-3">
                    <label class="col-form-label">Category: </label>
                    <InputSelect @bind-Value="model.CategoryId" class="form-control">
                        <option value="">Select Category</option>

                        @foreach(var category in categories)
                        {
                            <option value="@category.Id">@category.Name</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => model.CategoryId" />
                </div>

                <div class="mb-3">
                    <label class="col-form-label">Introduction: </label>
                    <InputText @bind-Value="model.Introduction" class="form-control" placeholder="Enter introduction"></InputText>
                    <ValidationMessage For="() => model.Introduction"></ValidationMessage>
                </div>

                <div class="mb-3">
                    <label class="col-form-label">Content: </label>
                    @* <InputTextArea @bind-Value="model.Content" class="form-control" placeholder="Enter content"></InputTextArea> *@
                    <BlazoredTextEditor @ref="@QuillHtml">
                        <ToolbarContent>
                            <select class="ql-header">
                                <option selected=""></option>
                                <option value="1"></option>
                                <option value="2"></option>
                                <option value="3"></option>
                                <option value="4"></option>
                                <option value="5"></option>
                            </select>
                            <span class="ql-formats">
                                <button class="ql-bold"></button>
                                <button class="ql-italic"></button>
                                <button class="ql-underline"></button>
                                <button class="ql-strike"></button>
                            </span>
                            <span class="ql-formats">
                                <select class="ql-color"></select>
                                <select class="ql-background"></select>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-list" value="ordered"></button>
                                <button class="ql-list" value="bullet"></button>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-link"></button>
                            </span>
                        </ToolbarContent>
                        <EditorContent>
                            @((MarkupString)model.Content)
                        </EditorContent>
                    </BlazoredTextEditor>

                    <ValidationMessage For="() => model.Content"></ValidationMessage>
                </div>

                <div class="container mt-5">
                    <div class="custom-control custom-checkbox">
                        <input type="checkbox" class="custom-control-input" id="customSwitch1" @bind-value="model.IsPublished" />
                        
                        <label class="custom-control-label" for="customSwitch1">@(model.IsPublished == true ? "Published" : "Not published")</label>
                    </div>
                </div>
                <hr/>

                @if(!string.IsNullOrWhiteSpace(errorMessage))
                {
                    <p class="text-danger">@errorMessage</p>
                }
                <div class="mb-3 d-flex justify-content-between">
                    <NavLink href="/admin/manage-blogs" type="reset" class="btn btn-danger">X Cancel</NavLink>
                    <button type="submit" class="btn btn-success">Save</button>
                </div>

                <hr/>

            </EditForm>
            }
            
        </div>
    </div>
</div>

<style type="text/css">
    .custom-control-label::before {
      left: -2.25rem;
      width: 2rem;
      height: 1rem;
      pointer-events: all;
      border-radius: 1rem;
    }

    .custom-control-label::after {
      top: calc(0.25rem + 2px);
      left: calc(-2.25rem + 2px);
      width: calc(1rem - 4px);
      height: calc(1rem - 4px);
      background-color: #adb5bd;
      border-radius: 1rem;
      transition: background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, transform 0.15s ease-in-out;
    }

    .custom-control-input:checked~.custom-control-label::after {
      background-color: #fff;
      transform: translateX(1rem);
    }

    .custom-control-input:checked~.custom-control-label::before {
      color: #fff;
      border-color: #80bdff;
      background-color: #007bff;
    }
</style>

@code {

    [Parameter]
    public int? urlBlogId { get; set; }

    private int BlogId => urlBlogId ?? 0;

    private bool _isLoading = false;
    private string? errorMessage = null;

    private BlogSaveModel model = new();

    private IEnumerable<Category> categories = Enumerable.Empty<Category>();

    private BlazoredTextEditor? QuillHtml;

    protected override async Task OnInitializedAsync()
    {
        var categoriesList = await CategoryService.GetCategoriesAsync();

        if (categoriesList?.Any() == true)
        {
            categories = categoriesList;
        }
        if(BlogId > 0)
        {
            //We are in edit mode
            var dbModel = await BlogPostService.GetPostAsync(BlogId);

            if(dbModel is null)
            {
                errorMessage = "Invalid url";
            }
            else
            {
                model = dbModel;
            }
        }
    }
    private async Task SaveBlogAsync()
    {
        model.Content = await QuillHtml.GetHTML();

        if(string.IsNullOrWhiteSpace(model.Content))
        {
            errorMessage = "Content is required";
            return;
        }

        _isLoading = true;
        try
        {
            var result = await BlogPostService.SaveAsync(model, AuthenticationProvider.LoggedInUser.UserId);

            if(result.Status)
            {
                NavigationManager.NavigateTo("/admin/manage-blogs");
                return;
            }
            else
            {
                errorMessage = result.ErrorMessage ?? "Error in saving blog post. Please try again";
                _isLoading = false;
            }

        }
        catch(Exception ex)
        {
            _isLoading = false;
            errorMessage = ex.Message;
        }

    }
}
